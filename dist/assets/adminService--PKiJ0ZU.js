import{d as i}from"./index-C5t5Zloy.js";const s=async()=>{const r=[];try{console.log("Starting admin user ID lookup"),console.log("Checking users collection for admin accounts");try{const o=await i.collection("users").where("isAdmin","==",!0).get();o.empty?console.warn("No admin users found in users collection with isAdmin=true"):console.log(`Found ${o.size} admin users in users collection`),o.forEach(n=>{const e=n.data();console.log("Processing admin user document:",{docId:n.id,hasUid:!!(e!=null&&e.uid),email:e==null?void 0:e.email}),e&&e.uid?(r.push(e.uid),console.log(`Added admin user by uid: ${e.uid}`)):(r.push(n.id),console.log(`Added admin user by doc.id: ${n.id}`))})}catch(o){console.error("Error checking users collection for admins:",o)}console.log("Checking for admin users in authentication custom claims");try{const o=await i.collection("auth").where("admin","==",!0).get();o.empty?console.warn("No admin users found in auth collection"):console.log(`Found ${o.size} admin users in auth collection`),o.forEach(n=>{const e=n.id;r.includes(e)?console.log(`Admin ${e} from auth collection already in list`):(r.push(e),console.log(`Added admin user from auth collection: ${e}`))})}catch(o){console.error("Error checking auth collection for admins:",o)}console.log("Checking for admin roles in user_roles collection");try{const o=await i.collection("user_roles").where("role","==","admin").get();o.empty?console.warn("No admin roles found in user_roles collection"):console.log(`Found ${o.size} admin roles in user_roles collection`),o.forEach(n=>{const e=n.data().userId;e&&!r.includes(e)?(r.push(e),console.log(`Added admin user from user_roles collection: ${e}`)):e&&console.log(`Admin ${e} from user_roles collection already in list`)})}catch(o){console.error("Error checking user_roles collection:",o)}if(r.length===0){console.warn("No admin users found in any collection. Adding default admin if exists.");try{const o=await i.collection("users").doc("admin@runeraffle.com").get();if(o.exists){const n=o.data(),e=(n==null?void 0:n.uid)||o.id;r.push(e),console.log(`Added default admin: ${e}`)}}catch(o){console.error("Error adding default admin:",o)}}return console.log(`Found ${r.length} total admin users:`,r),r}catch(o){return console.error("Error fetching admin IDs:",o),[]}},c=async r=>{try{const o=await s();return o.length===0?(console.warn("No admins found to notify"),0):(await Promise.all(o.map(n=>r(n).catch(e=>{console.error(`Error notifying admin ${n}:`,e)}))),o.length)}catch(o){return console.error("Error notifying all admins:",o),0}};export{s as getAdminUserIds,c as notifyAllAdmins};
